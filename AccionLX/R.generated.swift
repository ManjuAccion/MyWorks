//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 2 colors.
  struct color {
    /// Color `bgColor`.
    static let bgColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "bgColor")
    /// Color `redColor`.
    static let redColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "redColor")
    
    /// `UIColor(named: "bgColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func bgColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.bgColor, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "redColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func redColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.redColor, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `art.scnassets`.
    static let artScnassets = Rswift.FileResource(bundle: R.hostingBundle, name: "art", pathExtension: "scnassets")
    
    /// `bundle.url(forResource: "art", withExtension: "scnassets")`
    static func artScnassets(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.artScnassets
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 22 images.
  struct image {
    /// Image `CarImage`.
    static let carImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "CarImage")
    /// Image `backArrow`.
    static let backArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "backArrow")
    /// Image `bgRectangle`.
    static let bgRectangle = Rswift.ImageResource(bundle: R.hostingBundle, name: "bgRectangle")
    /// Image `favorite_24px`.
    static let favorite_24px = Rswift.ImageResource(bundle: R.hostingBundle, name: "favorite_24px")
    /// Image `ic_add photos`.
    static let ic_addPhotos = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add photos")
    /// Image `ic_add products`.
    static let ic_addProducts = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add products")
    /// Image `ic_books`.
    static let ic_books = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_books")
    /// Image `ic_cars`.
    static let ic_cars = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cars")
    /// Image `ic_categories`.
    static let ic_categories = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_categories")
    /// Image `ic_cycles`.
    static let ic_cycles = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cycles")
    /// Image `ic_dropDown`.
    static let ic_dropDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_dropDown")
    /// Image `ic_electronics`.
    static let ic_electronics = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_electronics")
    /// Image `ic_favourites`.
    static let ic_favourites = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_favourites")
    /// Image `ic_furniture`.
    static let ic_furniture = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_furniture")
    /// Image `ic_jobs`.
    static let ic_jobs = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_jobs")
    /// Image `ic_message`.
    static let ic_message = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_message")
    /// Image `ic_mobiles`.
    static let ic_mobiles = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_mobiles")
    /// Image `ic_property`.
    static let ic_property = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_property")
    /// Image `ic_user`.
    static let ic_user = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_user")
    /// Image `icon`.
    static let icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon")
    /// Image `locationIcon`.
    static let locationIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "locationIcon")
    /// Image `searchIcon`.
    static let searchIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "searchIcon")
    
    /// `UIImage(named: "CarImage", bundle: ..., traitCollection: ...)`
    static func carImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.carImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "backArrow", bundle: ..., traitCollection: ...)`
    static func backArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bgRectangle", bundle: ..., traitCollection: ...)`
    static func bgRectangle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bgRectangle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "favorite_24px", bundle: ..., traitCollection: ...)`
    static func favorite_24px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favorite_24px, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_add photos", bundle: ..., traitCollection: ...)`
    static func ic_addPhotos(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_addPhotos, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_add products", bundle: ..., traitCollection: ...)`
    static func ic_addProducts(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_addProducts, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_books", bundle: ..., traitCollection: ...)`
    static func ic_books(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_books, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_cars", bundle: ..., traitCollection: ...)`
    static func ic_cars(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cars, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_categories", bundle: ..., traitCollection: ...)`
    static func ic_categories(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_categories, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_cycles", bundle: ..., traitCollection: ...)`
    static func ic_cycles(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cycles, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_dropDown", bundle: ..., traitCollection: ...)`
    static func ic_dropDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_dropDown, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_electronics", bundle: ..., traitCollection: ...)`
    static func ic_electronics(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_electronics, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_favourites", bundle: ..., traitCollection: ...)`
    static func ic_favourites(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_favourites, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_furniture", bundle: ..., traitCollection: ...)`
    static func ic_furniture(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_furniture, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_jobs", bundle: ..., traitCollection: ...)`
    static func ic_jobs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_jobs, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_message", bundle: ..., traitCollection: ...)`
    static func ic_message(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_message, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_mobiles", bundle: ..., traitCollection: ...)`
    static func ic_mobiles(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_mobiles, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_property", bundle: ..., traitCollection: ...)`
    static func ic_property(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_property, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_user", bundle: ..., traitCollection: ...)`
    static func ic_user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_user, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon", bundle: ..., traitCollection: ...)`
    static func icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "locationIcon", bundle: ..., traitCollection: ...)`
    static func locationIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.locationIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "searchIcon", bundle: ..., traitCollection: ...)`
    static func searchIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.searchIcon, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 3 nibs.
  struct nib {
    /// Nib `CategoryCollectionViewCell`.
    static let categoryCollectionViewCell = _R.nib._CategoryCollectionViewCell()
    /// Nib `CategoryImageTableViewCell`.
    static let categoryImageTableViewCell = _R.nib._CategoryImageTableViewCell()
    /// Nib `CategoryTableViewCell`.
    static let categoryTableViewCell = _R.nib._CategoryTableViewCell()
    
    /// `UINib(name: "CategoryCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.categoryCollectionViewCell) instead")
    static func categoryCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.categoryCollectionViewCell)
    }
    
    /// `UINib(name: "CategoryImageTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.categoryImageTableViewCell) instead")
    static func categoryImageTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.categoryImageTableViewCell)
    }
    
    /// `UINib(name: "CategoryTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.categoryTableViewCell) instead")
    static func categoryTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.categoryTableViewCell)
    }
    
    static func categoryCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoryCollectionViewCell? {
      return R.nib.categoryCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoryCollectionViewCell
    }
    
    static func categoryImageTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoryImageTableViewCell? {
      return R.nib.categoryImageTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoryImageTableViewCell
    }
    
    static func categoryTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoryTableViewCell? {
      return R.nib.categoryTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoryTableViewCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    /// Storyboard `Home`.
    static let home = _R.storyboard.home()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `SignUp`.
    static let signUp = _R.storyboard.signUp()
    
    /// `UIStoryboard(name: "Home", bundle: ...)`
    static func home(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.home)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "SignUp", bundle: ...)`
    static func signUp(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.signUp)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _CategoryImageTableViewCell.validate()
    }
    
    struct _CategoryCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CategoryCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoryCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoryCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _CategoryImageTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CategoryImageTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoryImageTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoryImageTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "carImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'carImage' is used in nib 'CategoryImageTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "favorite_24px", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'favorite_24px' is used in nib 'CategoryImageTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _CategoryTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CategoryTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoryTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoryTableViewCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try home.validate()
      try launchScreen.validate()
      try main.validate()
      try signUp.validate()
    }
    
    struct home: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UITabBarController
      
      let bundle = R.hostingBundle
      let categoriesVC = StoryboardViewControllerResource<ALCategoriesVC>(identifier: "CategoriesVC")
      let name = "Home"
      
      func categoriesVC(_: Void = ()) -> ALCategoriesVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: categoriesVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_add photos", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_add photos' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_add products", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_add products' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_categories", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_categories' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_dropDown", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_dropDown' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_favourites", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_favourites' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_message", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_message' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_user", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_user' is used in storyboard 'Home', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "bgColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'bgColor' is used in storyboard 'Home', but couldn't be loaded.") }
        }
        if _R.storyboard.home().categoriesVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'categoriesVC' could not be loaded from storyboard 'Home' as 'ALCategoriesVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ALBaseViewController
      
      let baseViewController = StoryboardViewControllerResource<ALBaseViewController>(identifier: "BaseViewController")
      let bundle = R.hostingBundle
      let name = "Main"
      let splashViewController = StoryboardViewControllerResource<ALSplashViewController>(identifier: "SplashViewController")
      
      func baseViewController(_: Void = ()) -> ALBaseViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: baseViewController)
      }
      
      func splashViewController(_: Void = ()) -> ALSplashViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: splashViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "bgColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'bgColor' is used in storyboard 'Main', but couldn't be loaded.") }
        }
        if _R.storyboard.main().baseViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'baseViewController' could not be loaded from storyboard 'Main' as 'ALBaseViewController'.") }
        if _R.storyboard.main().splashViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'splashViewController' could not be loaded from storyboard 'Main' as 'ALSplashViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct signUp: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let loginViewController = StoryboardViewControllerResource<ALSignUpViewController>(identifier: "LoginViewController")
      let name = "SignUp"
      let signUpViewController = StoryboardViewControllerResource<ALSignUpViewController>(identifier: "SignUpViewController")
      
      func loginViewController(_: Void = ()) -> ALSignUpViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }
      
      func signUpViewController(_: Void = ()) -> ALSignUpViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signUpViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon' is used in storyboard 'SignUp', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "bgColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'bgColor' is used in storyboard 'SignUp', but couldn't be loaded.") }
          if UIKit.UIColor(named: "redColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'redColor' is used in storyboard 'SignUp', but couldn't be loaded.") }
        }
        if _R.storyboard.signUp().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'SignUp' as 'ALSignUpViewController'.") }
        if _R.storyboard.signUp().signUpViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signUpViewController' could not be loaded from storyboard 'SignUp' as 'ALSignUpViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
